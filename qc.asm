entity self;
entity other;
entity world;
float time;
float frametime;
float force_retouch;
string mapname;
float deathmatch;
float coop;
float teamplay;
float serverflags;
float total_secrets;
float total_monsters;
float found_secrets;
float killed_monsters;
float parm1;
float parm2;
float parm3;
float parm4;
float parm5;
float parm6;
float parm7;
float parm8;
float parm9;
float parm10;
float parm11;
float parm12;
float parm13;
float parm14;
float parm15;
float parm16;
float v_forward_x;
float v_forward_y;
float v_forward_z;
vector v_forward;
float v_up_x;
float v_up_y;
float v_up_z;
vector v_up;
float v_right_x;
float v_right_y;
float v_right_z;
vector v_right;
float trace_allsolid;
float trace_startsolid;
float trace_fraction;
float trace_endpos_x;
float trace_endpos_y;
float trace_endpos_z;
vector trace_endpos;
float trace_plane_normal_x;
float trace_plane_normal_y;
float trace_plane_normal_z;
vector trace_plane_normal;
float trace_plane_dist;
entity trace_ent;
float trace_inopen;
float trace_inwater;
entity msg_entity;
void() main;
void() StartFrame;
void() PlayerPreThink;
void() PlayerPostThink;
void() ClientKill;
void() ClientConnect;
void() PutClientInServer;
void() ClientDisconnect;
void() SetNewParms;
void() SetChangeParms;
void end_sys_globals;
.float modelindex;
.float absmin_x;
.float absmin_y;
.float absmin_z;
.vector absmin;
.float absmax_x;
.float absmax_y;
.float absmax_z;
.vector absmax;
.float ltime;
.float movetype;
.float solid;
.float origin_x;
.float origin_y;
.float origin_z;
.vector origin;
.float oldorigin_x;
.float oldorigin_y;
.float oldorigin_z;
.vector oldorigin;
.float velocity_x;
.float velocity_y;
.float velocity_z;
.vector velocity;
.float angles_x;
.float angles_y;
.float angles_z;
.vector angles;
.float avelocity_x;
.float avelocity_y;
.float avelocity_z;
.vector avelocity;
.float punchangle_x;
.float punchangle_y;
.float punchangle_z;
.vector punchangle;
.string classname;
.string model;
.float frame;
.float skin;
.float effects;
.float mins_x;
.float mins_y;
.float mins_z;
.vector mins;
.float maxs_x;
.float maxs_y;
.float maxs_z;
.vector maxs;
.float size_x;
.float size_y;
.float size_z;
.vector size;
.void() touch;
.void() use;
.void() think;
.void() blocked;
.float nextthink;
.entity groundentity;
.float health;
.float frags;
.float weapon;
.string weaponmodel;
.float weaponframe;
.float currentammo;
.float ammo_shells;
.float ammo_nails;
.float ammo_rockets;
.float ammo_cells;
.float items;
.float takedamage;
.entity chain;
.float deadflag;
.float view_ofs_x;
.float view_ofs_y;
.float view_ofs_z;
.vector view_ofs;
.float button0;
.float button1;
.float button2;
.float impulse;
.float fixangle;
.float v_angle_x;
.float v_angle_y;
.float v_angle_z;
.vector v_angle;
.float idealpitch;
.string netname;
.entity enemy;
.float flags;
.float colormap;
.float team;
.float max_health;
.float teleport_time;
.float armortype;
.float armorvalue;
.float waterlevel;
.float watertype;
.float ideal_yaw;
.float yaw_speed;
.entity aiment;
.entity goalentity;
.float spawnflags;
.string target;
.string targetname;
.float dmg_take;
.float dmg_save;
.entity dmg_inflictor;
.entity owner;
.float movedir_x;
.float movedir_y;
.float movedir_z;
.vector movedir;
.string message;
.float sounds;
.string noise;
.string noise1;
.string noise2;
.string noise3;
void end_sys_fields;
float FALSE;
float TRUE;
float FL_FLY;
float FL_SWIM;
float FL_CLIENT;
float FL_INWATER;
float FL_MONSTER;
float FL_GODMODE;
float FL_NOTARGET;
float FL_ITEM;
float FL_ONGROUND;
float FL_PARTIALGROUND;
float FL_WATERJUMP;
float FL_JUMPRELEASED;
float MOVETYPE_NONE;
float MOVETYPE_WALK;
float MOVETYPE_STEP;
float MOVETYPE_FLY;
float MOVETYPE_TOSS;
float MOVETYPE_PUSH;
float MOVETYPE_NOCLIP;
float MOVETYPE_FLYMISSILE;
float MOVETYPE_BOUNCE;
float MOVETYPE_BOUNCEMISSILE;
float SOLID_NOT;
float SOLID_TRIGGER;
float SOLID_BBOX;
float SOLID_SLIDEBOX;
float SOLID_BSP;
float RANGE_MELEE;
float RANGE_NEAR;
float RANGE_MID;
float RANGE_FAR;
float DEAD_NO;
float DEAD_DYING;
float DEAD_DEAD;
float DEAD_RESPAWNABLE;
float DAMAGE_NO;
float DAMAGE_YES;
float DAMAGE_AIM;
float IT_AXE;
float IT_SHOTGUN;
float IT_SUPER_SHOTGUN;
float IT_NAILGUN;
float IT_SUPER_NAILGUN;
float IT_GRENADE_LAUNCHER;
float IT_ROCKET_LAUNCHER;
float IT_LIGHTNING;
float IT_EXTRA_WEAPON;
float IT_SHELLS;
float IT_NAILS;
float IT_ROCKETS;
float IT_CELLS;
float IT_ARMOR1;
float IT_ARMOR2;
float IT_ARMOR3;
float IT_SUPERHEALTH;
float IT_KEY1;
float IT_KEY2;
float IT_INVISIBILITY;
float IT_INVULNERABILITY;
float IT_SUIT;
float IT_QUAD;
float IT_STUNNED;
float IT_BURNING;
float CONTENT_EMPTY;
float CONTENT_SOLID;
float CONTENT_WATER;
float CONTENT_SLIME;
float CONTENT_LAVA;
float CONTENT_SKY;
float STATE_TOP;
float STATE_BOTTOM;
float STATE_UP;
float STATE_DOWN;
float VEC_ORIGIN_x;
float VEC_ORIGIN_y;
float VEC_ORIGIN_z;
vector VEC_ORIGIN;
float VEC_HULL_MIN_x;
float VEC_HULL_MIN_y;
float VEC_HULL_MIN_z;
vector VEC_HULL_MIN;
float VEC_HULL_MAX_x;
float VEC_HULL_MAX_y;
float VEC_HULL_MAX_z;
vector VEC_HULL_MAX;
float VEC_HULL2_MIN_x;
float VEC_HULL2_MIN_y;
float VEC_HULL2_MIN_z;
vector VEC_HULL2_MIN;
float VEC_HULL2_MAX_x;
float VEC_HULL2_MAX_y;
float VEC_HULL2_MAX_z;
vector VEC_HULL2_MAX;
float SVC_SETVIEWPORT;
float SVC_STUFFCMD;
float SVC_SETANGLES;
float SVC_CLIENTDATA;
float SVC_TEMPENTITY;
float SVC_CENTERPRINT;
float SVC_KILLEDMONSTER;
float SVC_FOUNDSECRET;
float SVC_INTERMISSION;
float SVC_FINALE;
float SVC_CDTRACK;
float SVC_SELLSCREEN;
float TE_SPIKE;
float TE_SUPERSPIKE;
float TE_GUNSHOT;
float TE_EXPLOSION;
float TE_TAREXPLOSION;
float TE_LIGHTNING1;
float TE_LIGHTNING2;
float TE_WIZSPIKE;
float TE_KNIGHTSPIKE;
float TE_LIGHTNING3;
float TE_LAVASPLASH;
float TE_TELEPORT;
float CHAN_AUTO;
float CHAN_WEAPON;
float CHAN_VOICE;
float CHAN_ITEM;
float CHAN_BODY;
float ATTN_NONE;
float ATTN_NORM;
float ATTN_IDLE;
float ATTN_STATIC;
float UPDATE_GENERAL;
float UPDATE_STATIC;
float UPDATE_BINARY;
float UPDATE_TEMP;
float EF_BRIGHTFIELD;
float EF_MUZZLEFLASH;
float EF_BRIGHTLIGHT;
float EF_DIMLIGHT;
float MSG_BROADCAST;
float MSG_ONE;
float MSG_ALL;
float MSG_INIT;
float GRAVITY;
float model_eyes;
float model_player;
float model_head;
float model_null;
float model_fiend;
float model_zombie;
float LAST_ZUMBI;
.float statustime;
.string messagetxt;
.float messagetime;
.float messagebreaks;
.string magicstr;
.float magic;
.float pow;
.float tesla;
.float televec_x;
.float televec_y;
.float televec_z;
.vector televec;
.float sitems;
.float fiend_finished;
.entity tknight;
float movedist;
float gameover;
string string_null;
float empty_float;
entity newmis;
entity activator;
entity damage_attacker;
float framecount;
float skill;
.string wad;
.string map;
.float worldtype;
.string killtarget;
.float light_lev;
.float style;
.void() th_stand;
.void() th_walk;
.void() th_run;
.void() th_missile;
.void() th_melee;
.void(entity attacker, float damage) th_pain;
.void() th_die;
.entity oldenemy;
.float speed;
.float lefty;
.float search_time;
.float attack_state;
float AS_STRAIGHT;
float AS_SLIDING;
float AS_MELEE;
float AS_MISSILE;
.float walkframe;
.float attack_finished;
.float pain_finished;
.float invincible_finished;
.float invisible_finished;
.float super_damage_finished;
.float radsuit_finished;
.float invincible_time;
.float invincible_sound;
.float invisible_time;
.float invisible_sound;
.float super_time;
.float super_sound;
.float rad_time;
.float fly_sound;
.float axhitme;
.float show_hostile;
.float jump_flag;
.float swim_flag;
.float air_finished;
.float bubble_count;
.string deathtype;
.string mdl;
.float mangle_x;
.float mangle_y;
.float mangle_z;
.vector mangle;
.float t_length;
.float t_width;
.float dest_x;
.float dest_y;
.float dest_z;
.vector dest;
.float dest1_x;
.float dest1_y;
.float dest1_z;
.vector dest1;
.float dest2_x;
.float dest2_y;
.float dest2_z;
.vector dest2;
.float wait;
.float delay;
.entity trigger_field;
.string noise4;
.float pausetime;
.entity movetarget;
.float aflag;
.float dmg;
.float cnt;
.void() think1;
.float finaldest_x;
.float finaldest_y;
.float finaldest_z;
.vector finaldest;
.float count;
.float lip;
.float state;
.float pos1_x;
.float pos1_y;
.float pos1_z;
.vector pos1;
.float pos2_x;
.float pos2_y;
.float pos2_z;
.vector pos2;
.float height;
.float waitmin;
.float waitmax;
void(vector ang) makevectors;
void(entity e, vector o) setorigin;
void(entity e, string m) setmodel;
void(entity e, vector min, vector max) setsize;
void() break;
float() random;
void(entity e, float chan, string samp, float vol, float atten) sound;
vector(vector v) normalize;
void(string e) error;
void(string e) objerror;
float(vector v) vlen;
float(vector v) vectoyaw;
entity() spawn;
void(entity e) remove;
void(vector v1, vector v2, float nomonsters, entity forent) traceline;
entity() checkclient;
entity(entity start, .string fld, string match) find;
string(string s) precache_sound;
string(string s) precache_model;
void(entity client, string s) stuffcmd;
entity(vector org, float rad) findradius;
void(string s) bprint;
void(entity client, string s) sprint;
void(string s) dprint;
string(float f) ftos;
string(vector v) vtos;
void() coredump;
void() traceon;
void() traceoff;
void(entity e) eprint;
float(float yaw, float dist) walkmove;
float(float yaw, float dist) droptofloor;
void(float style, string value) lightstyle;
float(float v) rint;
float(float v) floor;
float(float v) ceil;
float(entity e) checkbottom;
float(vector v) pointcontents;
float(float f) fabs;
vector(entity e, float speed) aim;
float(string s) cvar;
void(string s) localcmd;
entity(entity e) nextent;
void(vector o, vector d, float color, float count) particle;
void() ChangeYaw;
vector(vector v) vectoangles;
void(float to, float f) WriteByte;
void(float to, float f) WriteChar;
void(float to, float f) WriteShort;
void(float to, float f) WriteLong;
void(float to, float f) WriteCoord;
void(float to, float f) WriteAngle;
void(float to, string s) WriteString;
void(float to, entity s) WriteEntity;
void(float step) movetogoal;
string(string s) precache_file;
void(entity e) makestatic;
void(string s) changelevel;
void(string var, string val) cvar_set;
void(entity client, string s) centerprint;
void(vector pos, string samp, float vol, float atten) ambientsound;
string(string s) precache_model2;
string(string s) precache_sound2;
string(string s) precache_file2;
void(entity e) setspawnparms;
void(vector tdest, float tspeed, __function func) SUB_CalcMove;
void(entity ent, vector tdest, float tspeed, __function func) SUB_CalcMoveEnt;
void() SUB_CalcMoveDone;
void() SUB_Null;
void() SUB_UseTargets;
void() SUB_Remove;
void(entity targ, entity inflictor, entity attacker, float damage) T_Damage;
float(entity e, float healamount, float ignore) T_Heal;
float(entity targ, entity inflictor) CanDamage;
void(entity client, string s1, string s2, string s3, string s4, string s5, string s6, string s7) centerprintx;
void(entity e, string s, float breaks) ccenterprint;
void(entity e, string s, float breaks, float segundos) ceprint;
.float player_force_respawn;
float(entity player) MaxArmorForType;
float MAX_CELLS;
void() bound_self_ammo;
float(entity player, float it_wpn) getpow;
float(entity player, float it_wpn) maxpower;
void(entity player, float it_wpn) pow_upgrade;
.float hook;
void() ClientDropStuff;
string array_user_map0;
string array_user_map1;
string array_user_map2;
string array_user_map3;
string array_user_map4;
string array_user_map5;
string array_user_map6;
string array_user_map7;
string array_user_map8;
string array_user_map9;
void(float index, string name) array_set_user_map;
string(float index) array_get_user_map;
entity array_kick1;
entity array_kick2;
entity array_kick3;
entity array_kick4;
entity array_kick5;
entity array_kick6;
entity array_kick7;
entity array_kick8;
entity array_kick9;
entity array_kick10;
entity array_kick11;
entity array_kick12;
entity array_kick13;
entity array_kick14;
entity array_kick15;
void(float index, entity client) array_set_kick;
entity(float index) array_get_kick;
float ELOHIM_MAX_SUICIDES;
string USER_MOTD;
void() userdefs_init_world;
void(entity client, string s1, string s2) centerprint2;
void(entity client, string s1, string s2, string s3) centerprint3;
void(entity client, string s1, string s2, string s3, string s4) centerprint4;
void(entity client, string s1, string s2, string s3, string s4, string s5) centerprint5;
void(entity client, string s1, string s2, string s3, string s4, string s5, string s6) centerprint6;
void(entity client, string s1, string s2, string s3, string s4, string s5, string s6, string s7) centerprint7;
void(entity client, string s1, string s2) sprint2;
void(entity client, string s1, string s2, string s3) sprint3;
void(entity client, string s1, string s2, string s3, string s4) sprint4;
void(entity client, string s1, string s2, string s3, string s4, string s5) sprint5;
void(entity client, string s1, string s2, string s3, string s4, string s5, string s6) sprint6;
void(string s1, string s2) bprint2;
void(string s1, string s2, string s3) bprint3;
void(string s1, string s2, string s3, string s4) bprint4;
void(string s1, string s2, string s3, string s4, string s5) bprint5;
void(string s1, string s2, string s3, string s4, string s5, string s6) bprint6;
void(string s1, string s2) localcmd2;
void(string s1, string s2, string s3) localcmd3;
void(string s1, string s2, string s3, string s4) localcmd4;
void(string s1, string s2, string s3, string s4, string s5) localcmd5;
void(string s1, string s2, string s3, string s4, string s5, string s6) localcmd6;
void(string s1, string s2, string s3, string s4, string s5, string s6, string s7) localcmd7;
void(string s1) cprint;
void(string s1, string s2) cprint2;
void(string s1, string s2, string s3) cprint3;
void(string s1, string s2, string s3, string s4) cprint4;
void(string s1, string s2, string s3, string s4, string s5) cprint5;
void(string s1, string s2, string s3, string s4, string s5, string s6) cprint6;
void(float f) utils_bprint_float;
void(float f) utils_print_float;
void(float f) utils_print_int3;
void(float f) utils_cprint_int3;
void(vector v) utils_print_vec;
void(float b) utils_print_bit;
void(float n) utils_print_bin;
void(entity e) utils_dump_position;
float(float a, float b) utils_min;
float(float a, float b) utils_max;
float(float a, float b, float c) utils_min3;
float(float a, float b, float c) utils_max3;
entity(__function think_function, float think_time) utils_make_scheduled_event;
void(string cvar, float value) utils_set_cvar;
void(__function dofunc, string item_name) utils_do_item;
void(__function dofunc) utils_do_items;
float ELOHIM_CONNECTED;
void(__function dofunc) utils_do_players;
string(float n) strings_ftos;
string(float n) strings_ftos_gold;
string(entity e) strings_get_armour_val;
string(entity e) strings_get_armour_type;
string(entity e) strings_get_weapon;
string(entity e) strings_get_health_ammo;
string(float num) strings_get_teamname;
string(float num) strings_get_teamname2;
string(float mapnum) strings_get_mapname;
string(float mode) strings_get_mode;
void() elohim_load_entities;
void(float vlaue) elohim_set_teamplay;
void() elohim_reset_stats;
void(float command) console_command;
void() console_set_aliases;
void(entity client) observer_disconnect_notify;
void() admin_send_aliases1;
void() admin_impulse;
void() admin_start_code;
void(float fDoKick) admin_confirm_kick_response;
void(entity player) admin_disconnect_notify;
void() observer_impulse;
void() observer_help;
void() observer_start;
void() observer_find_teleport;
void() observer_check_size;
void(float response) observer_confirm_leave_response;
void() match_show_timelimit;
void() match_impulse;
void(entity player) match_verify_team;
void(entity player) match_disconnect_notify;
void() vote_impulse;
void() execute_changelevel;
void() NextLevel;
void(vector org, entity death_owner) spawn_tdeath;
void() admin_logout;
float ELOHIM_SUICIDE_OK;
float ELOHIM_TOO_MANY_SUICIDES;
float ELOHIM_NEW_CLIENT;
float ELOHIM_ADMINISTRATOR;
float ELOHIM_OBSERVER;
float ELOHIM_OBSERVER_WALK;
float ELOHIM_OBSERVER_FLY;
float ELOHIM_OBSERVER_CHASE;
float ELOHIM_POP_FORWARD;
float ELOHIM_READY;
float ELOHIM_YES;
float ELOHIM_HEADS_UP;
float ELOHIM_SETTING_OPTIONS;
float ELOHIM_OK_TO_SHOOT;
float ELOHIM_KICK_CONFIRM;
float ELOHIM_FOUND_BINDINGS;
float ELOHIM_CONFIRM_LEAVE;
float ELOHIM_SAME_LEVEL;
float ELOHIM_MATCH_MODE;
float ELOHIM_PRACTICE_MODE;
float ELOHIM_SERVER_INITIALIZED;
float ELOHIM_NO_GIBS;
float ELOHIM_LOW_GIBS;
float ELOHIM_NO_QUAD;
float ELOHIM_NO_PENT;
float ELOHIM_NO_RING;
float ELOHIM_MODE_VOTE;
float ELOHIM_DEDICATED_SERVER;
float ELOHIM_TIMER_STARTED;
float ELOHIM_MATCH_STARTED;
float ELOHIM_MATCH_PAUSED;
float ELOHIM_MATCH_OVER;
float ELOHIM_MATCH_WAIT;
float ELOHIM_KICKING;
float elohim_player_ids;
float elohim_password;
float elohim_devparam;
float elohim_playmode;
float elohim_state;
float elohim_timelimit;
float elohim_nextcheck;
entity elohim_request;
float elohim_level;
float elohim_levelcount;
float elohim_lastcount;
float elohim_num_spawns;
float elohim_num_starts;
string elohim_version;
string elohim_version_info;
entity elohim_debug_client;
string nextmap;
float timelimit;
float fraglimit;
void() elohim_init_world;
void() elohim_intro_think;
void() elohim_make_intro;
void() elohim_set_aliases;
void() elohim_init_think;
void() elohim_show_mode;
void() elohim_client_connect;
void() elohim_client_disconnect;
void() elohim_help;
void() elohim_help_change;
void() elohim_help_misc;
void() elohim_commands;
void() elohim_levels;
void() elohim_show_killstats;
void(float frac, float tot) elohim_print_percent3;
void() elohim_show_efficiency;
void() elohim_show_stats;
void() elohim_debug_info;
void() elohim_ping_reply;
void() elohim_bad_impulse;
void() elohim_vinfo;
void() elohim_impulse;
void() elohim_bf_think;
void() elohim_observer_start_think;
void() elohim_put_client_in_server;
void(entity client) elohim_kick_player;
float() elohim_client_suicide;
void() elohim_periodic_checks;
void() elohim_disconnect_check;
void() elohim_start_frame;
entity(entity e) observer_find_target;
void() observer_set_chase_position;
void() observer_heads_up;
void() SetNewParms2;
void() respawn;
void() observer_get_target;
void() WaterMove;
void() CheckWaterJump;
void(vector pos) observer_spawn_tfog;
void() observer_check_teleport;
entity(float id) observer_get_target_from_id;
void() observer_clear_flags;
void() observer_walk_start;
void() observer_fly_start;
void() observer_chase_start;
void() observer_end;
void() observer_pop_forward;
void() observer_pop_down;
void() observer_pop_up;
void() observer_next_target;
void() observer_prev_target;
void() observer_move_to_target;
void() observer_remove_target;
void() observer_cycle_mode;
void() observer_impulse_commands;
void() observer_walk_help;
void() observer_fly_help;
void() observer_chase_help;
void() observer_cancel_leave;
void() observer_confirm;
void(float jump) observer_jump;
void() observer_update_display;
void() observer_update_status_bar;
void() observer_fly_move;
void() observer_pre_think;
void() observer_post_think;
void() observer_door_touch;
void() vote_repeat;
void() vote_accept;
void() vote_reject;
void() vote_clear;
float() vote_majority;
float(string s1, string s2, __function accept) vote_init;
void() vote_yes;
void() vote_no;
void() SUB_regen;
void() GibPlayer;
void() match_enter_ghost_code;
void(entity ghostent) match_restore_ghost;
void() admin_disable_item;
float elohim_match_start_time;
float elohim_match_pause_time;
float elohim_team1;
float elohim_team2;
float elohim_lastteam1;
float elohim_lastteam2;
float elohim_teamsize1;
float elohim_teamsize2;
float elohim_teamfrags1;
float elohim_teamfrags2;
float elohim_maxsize;
entity elohim_match_timer;
void() match_item_reset;
void() match_init_player;
void() match_unready_player;
void() match_reset;
void() match_gib_player;
string(float n) match_szplural;
void() match_bprint_score;
void() match_bprint_time;
void() match_sprint_status;
void() match_end;
void() match_timer_think2;
void() match_add_spawn;
void() match_remove_start;
void() match_remove_starts;
void() match_begin;
void() match_timer_think1;
float() match_put_player_in_team;
float() match_all_ready;
void() match_start_timer;
entity(float code) match_find_ghost;
void() match_make_ghost;
void() match_show_ghost_code;
void() match_request_restore_ghost;
void() match_ready;
void() match_notready;
void() match_unlock;
void() match_request_unlock;
void() match_help;
void() match_show_not_ready;
void() match_pause_item;
void() match_show_pause;
void() match_pause;
void() match_request_pause;
void() match_unpause_item;
void() match_unpause_player;
void() match_unpause;
void() match_request_unpause;
float CONSOLE_ENT_YAW;
float CONSOLE_ENT_PITCH;
float CONSOLE_ENT_ROLL;
void() console_ping_think;
void() console_ping;
void() console_show_time;
void() console_show_status;
void() console_show_debug_info;
void() console_show_score;
void() console_list_ghosts;
void() console_show_killstats;
void(float frac, float tot) console_print_percent4;
void() console_show_efficiency;
void() console_show_stats;
void() console_commands;
void() console_debug_client;
void() console_stuff_impulse;
void() console_stuff_colour;
void() console_client_flags;
void() console_version_info;
void(float newlevel) console_check_level;
void() console_get_user_nextlevel;
vector() console_get_origin;
vector() console_get_angles;
void(string name, float angleflags) console_make_entity;
void() admin_cancel_kick;
void() admin_confirm_kick;
void() admin_do_kick;
void() options_start_setting;
float() options_get_mode;
float ADMIN_NORMAL_MODE;
float ADMIN_PRACTICE_MODE;
float ADMIN_MATCH_MODE;
string request_mapname;
float request_timelimit;
float request_gibs;
float request_mode;
entity kick_target;
void() admin_send_aliases2;
void() admin_create;
void() admin_enter_code;
void() admin_change_level;
void(float level) admin_request_change_level;
void() admin_phatten_player;
void() admin_set_mode;
void(float newmode) admin_request_set_mode;
void(float value) admin_set_teamplay;
void() admin_set_timelimit;
void(float newlimit) admin_request_set_timelimit;
void() admin_set_gibs;
void(float gibs) admin_request_set_gibs;
void() admin_set_quad;
void() admin_request_set_quad;
void() admin_set_pent;
void() admin_request_set_pent;
void() admin_set_ring;
void() admin_request_set_ring;
void() admin_set_mode_vote;
void() admin_print_kick_choice;
void() admin_start_kick;
void() admin_list_ghosts;
void() admin_show_spot_info;
void() admin_next_spawn_point;
void() admin_make_spawn_point;
void() admin_help;
float OPTIONS_NO_GIBS;
float OPTIONS_LOW_GIBS;
float OPTIONS_HIGH_GIBS;
float OPTIONS_PAUSABLE;
string(float mode) options_szmode;
string(float value) options_sztimelimit;
string(float value) options_szfraglimit;
string(float gibs) options_szgibs;
string(float value) options_szteamplay;
string(float value) options_sznoexit;
string(float value) options_szpausable;
string(float value) options_szticrate;
string(float value) options_szquad;
string(float value) options_szpent;
string(float value) options_szring;
string(float value) options_szmode_vote;
string() options_szback;
void() options_display;
float() options_get_gibs;
void() options_change;
void() options_finish_setting;
void() options_pre_think;
vector() SetMovedir;
void() InitTrigger;
void() DelayThink;
void(float normal) SUB_AttackFinished;
float(entity targ) visible;
void(__function thinkst) SUB_CheckRefire;
void(vector org, vector vel, float damage) SpawnBlood;
float() crandom;
float HOOK_OUT;
float HOOK_ON;
float ACTIVATE_HOOK;
float TERMINATE_HOOK;
void(entity Head) DisolveChain;
void() LinkPos;
entity(entity head, entity tail, float num) CreateChain;
void() HookVanish;
void() HookPull;
void() T_ChainTouch;
void(entity myself) W_FireChain;
void() CheckGrapHook;
float(entity player) runeof;
void(entity player) removerune;
void(entity player, float runa) setrune;
float(entity player) weapon2of;
void(entity player) removeweapon2;
void(entity player, float weapon2) setweapon2;
.float camoattack;
void() BecomeExplosion;
void() Rune_Touch;
void() KickRunes;
void(float runetype, vector pos) TossRune;
void() TRASH_Rune;
void() StatusThink;
void() GrenadeTouch;
void() GrenadeExplode;
void(vector org, float damage, float timed) makeboom;
void(entity inflictor, entity attacker, float radius, float damage, entity ignore) T_FlameRadiusDamage;
void(vector direcao_do_caralho) spawn_dog;
entity cometa;
void(vector org) spawn_tfog;
void(entity inflictor, entity attacker, float damage, entity ignore) T_RadiusDamage;
float() selfmagic;
float() mstate;
void() mstateoff;
void() mstateon;
void() player_run;
void() Magic_Teleport;
void(float f1, float f2) anima;
void() DeathSound;
void() player_die_ax1;
void() player_diea1;
void() player_dieb1;
void() player_diec1;
void() player_died1;
void() player_diee1;
void(string gibname, float dm) ThrowGib;
void() Amigo_Die;
void() Amigo_MissileTouch;
void() Amigo_GetEnemy;
void() Amigo_Think;
void() Executa_Clarao;
void() Sucker_Suck;
void() Sucker_Start;
void() Cometa_Touch;
void(vector org) Cometa;
void() Aguarde;
void() box_explode_explode;
void() box_explode;
void() W_SetCurrentAmmo;
void() trapack_explode;
void() trapack_die;
void() trapack_touch;
void() W_FireMagic;
void(entity player, vector ponto) spawn_lumbriga;
void() Virus_ComeVitima;
void() Poison_Dart_Touch;
void(vector org, vector dir) launch_spike;
void() MW_FireVirus;
void() ShellExplode;
void() MW_FireXShotgun;
void() bound_other_ammo;
void() SUPER_weapon_touch;
void() KickSpecialWeapon;
void() SpecialWeaponThink;
void(float specialnum, vector org) TossSpecial;
float() W_BestWeapon;
void() TRASH_Special;
float(float v) anglemod;
void(vector dest) ChooseTurn;
void() ai_face;
float enemy_vis;
float enemy_infront;
float enemy_range;
float enemy_yaw;
float() CheckAttack;
float(entity targ) infront;
float(entity targ) range;
void(float d) ai_charge;
void() ai_charge_side;
void() ai_melee;
void() ai_melee_side;
void() movetarget_f;
void() t_movetarget;
float current_yaw;
entity sight_entity;
float sight_entity_time;
void() path_corner;
void() HuntTarget;
void() SightSound;
void() FoundTarget;
float() FindTarget;
void(float dist) ai_forward;
void(float dist) ai_back;
void(float dist) ai_pain;
void(float dist) ai_painforward;
void(float dist) ai_walk;
void() ai_stand;
void() ai_turn;
float() FacingIdeal;
float() DogCheckAttack;
float() CheckAnyAttack;
void() ai_run_melee;
void() ai_run_missile;
void() ai_run_slide;
void(float dist) ai_run;
void(entity client, float fragval) client_frag;
void() T_MissileTouch;
void() info_player_start;
void(entity targ, entity attacker) ClientObituary;
void(entity targ, entity attacker) Killed;
void() PlaceItem;
void() weapon_touch;
void() ammo_touch;
void() StartItem;
float H_ROTTEN;
float H_MEGA;
.float healamount;
.float healtype;
void() health_touch;
void() item_health;
void() armor_touch;
void() item_armor1;
void() item_armor2;
void() item_armorInv;
float(float w) RankForWeapon;
void(float old, float new) Deathmatch_Weapon;
void() weapon_supershotgun;
void() weapon_nailgun;
void() weapon_supernailgun;
void() weapon_grenadelauncher;
void() weapon_rocketlauncher;
void() weapon_lightning;
float WEAPON_BIG2;
void() item_shells;
void() item_spikes;
void() item_rockets;
void() item_cells;
float WEAPON_SHOTGUN;
float WEAPON_ROCKET;
float WEAPON_SPIKES;
float WEAPON_BIG;
void() item_weapon;
void() sigil_touch;
void() item_sigil;
void() powerup_touch;
void() item_artifact_invulnerability;
void() item_artifact_envirosuit;
void() item_artifact_invisibility;
void() item_artifact_super_damage;
void() BackpackTouch;
void() upgrade_touch;
void() Upgrade_Rot;
void(float it, float powerups) Throw_Weapon;
void(float ITE) Throw_Quant_Upgrades;
void() DropBackpack;
float DOOR_START_OPEN;
float DOOR_DONT_LINK;
float DOOR_GOLD_KEY;
float DOOR_SILVER_KEY;
float DOOR_TOGGLE;
void() door_go_down;
void() door_go_up;
void() door_blocked;
void() door_hit_top;
void() door_hit_bottom;
void() door_fire;
void() door_use;
void() door_trigger_touch;
void() door_killed;
void() door_touch;
entity(vector fmins, vector fmaxs) spawn_field;
float(entity e1, entity e2) EntitiesTouching;
void() LinkDoors;
void() func_door;
void() fd_secret_move1;
void() fd_secret_move2;
void() fd_secret_move3;
void() fd_secret_move4;
void() fd_secret_move5;
void() fd_secret_move6;
void() fd_secret_done;
float SECRET_OPEN_ONCE;
float SECRET_1ST_LEFT;
float SECRET_1ST_DOWN;
float SECRET_NO_SHOOT;
float SECRET_YES_SHOOT;
void() fd_secret_use;
void() secret_blocked;
void() secret_touch;
void() func_door_secret;
entity(vector v) spawn_hell_knight;
void() player_knight_axe;
void() SuperDamageSound;
void(vector p1, vector p2, entity from, float damage) LightningDamage;
void() UUURRR_Sound;
void() W_Precache;
void() Morteiro_Touch;
void() Morteiro_Think;
void() SW_FireMorteiro;
void() AXE10_Bomb_Touch;
void() SW_FirePipebomb;
void() MegaOrb_HLV;
vector(vector source, vector normal) R_Vector;
void() MegaOrb_Scan;
void() REFLETE;
void() MegaOrb_Touch;
void() MegaOrb_GetEnemy;
void() SW_FireSmart;
void(entity attacker, entity targ, float damg) Tesleia;
void() Do_Shock;
void(float dano) SW_FireTesla;
void(float damage, float shotcount, vector dir, vector spread) FireBullets_2;
void() SW_FireChaingun;
void() play_teleport2;
void(vector org) spawn_tfog2;
void() tdeath2_touch;
void(vector org, entity death_owner) spawn_tdeath2;
void() TeleFuck;
void() FIEND_Touch;
void() FIEND_AXE1;
void() FIEND_AXE02;
void() FIEND_AXE03;
void() FIEND_AXE04;
void() FIEND_AXE05;
void() FIEND_AXE06;
void() player_pain1;
void() W_FireAxe;
vector() wall_velocity;
void(vector org, vector vel) SpawnMeatSpray;
void(float damage) spawn_touchblood;
void(vector org, vector vel) SpawnChunk;
entity multi_ent;
float multi_damage;
void() ClearMultiDamage;
void() ApplyMultiDamage;
void(entity hit, float damage) AddMultiDamage;
void(float damage, vector dir) TraceAttack;
void(float shotcount, vector dir, vector spread) FireBullets;
void() W_FireShotgun;
void() W_FireSuperShotgun;
void() s_explode1;
void() s_explode2;
void() s_explode3;
void() s_explode4;
void() s_explode5;
void() s_explode6;
void() W_FireRocket;
void() W_FireLightning;
void() W_FireGrenade;
void() spike_touch;
void() superspike_touch;
void() W_FireSuperSpikes;
void() LaserTouch;
void(vector org, vector dir) Fire_Laser;
void(float ox) W_FireSpikes;
.float hit_z;
float() W_CheckNoAmmo;
void() player_axe1;
void() player_axeb1;
void() player_axec1;
void() player_axed1;
void() player_shot1;
void() player_nail1;
void() player_light1;
void() player_rocket1;
void() player_Tesla1;
void() player_Chaingun1;
void() player_laser1;
void() W_Attack;
void() W_ChangeWeapon;
void() CheatCommand;
void() CycleWeaponCommand;
void() CycleWeaponReverseCommand;
void() QuadCheat;
void() ImpulseCommands;
void() W_WeaponFrame;
void() Laser_Touch;
void(vector org, vector vec) LaunchLaser;
void() InitBodyQue;
entity lastspawn;
void() SPECIAL_DROP;
void() spow_touch;
void() zulu_keytouch;
void() worldspawn;
float aux;
entity bodyque_head;
void() bodyque;
void(entity ent) CopyToBodyQue;
void() monster_fish;
void() monster_army;
void() monster_dog;
void() monster_boss;
void() monster_demon1;
void() monster_enforcer;
void() monster_hell_knight;
void() monster_knight;
void() monster_ogre;
void() monster_oldone;
void() monster_shalrath;
void() monster_shambler;
void() monster_tarbaby;
void() monster_wizard;
void() monster_zombie;
void() monster_use;
void() monster_death_use;
void() walkmonster_start_go;
void() walkmonster_start;
void() flymonster_start_go;
void() flymonster_start;
void() swimmonster_start_go;
void() swimmonster_start;
void() player_gaxe1;
void() player_axpain1;
void() PainSound;
void() player_pain;
void() player_stand1;
float(entity me) fly_waterlevel;
float intermission_running;
float intermission_exittime;
void() info_intermission;
void() SetPracticeParms;
void() DecodeLevelParms;
entity() FindIntermission;
void() GotoNextMap;
void() ExitIntermission;
void() IntermissionThink;
void() ntouch;
void() IMPULSES_1xx_HELP;
void() trigger_changelevel;
void() set_suicide_frame;
float(vector v) CheckSpawnPoint;
entity() SelectSpawnPoint;
void() PlayerDie;
void() info_player_start2;
void() testplayerstart;
void() info_player_deathmatch;
void() info_player_coop;
void() PlayerDeathThink;
void() PlayerJump;
.float dmgtime;
void() SpawnBurn;
void() CheckPowerups;
void() event_lightning;
void() info_null;
void() info_notnull;
float START_OFF;
void() light_use;
void() light;
void() light_fluoro;
void() light_fluorospark;
void() light_globe;
void() FireAmbient;
void() light_torch_small_walltorch;
void() light_flame_large_yellow;
void() light_flame_small_yellow;
void() light_flame_small_white;
void() fire_fly;
void() fire_touch;
void() misc_fireball;
void() barrel_explode;
void() misc_explobox;
void() misc_explobox2;
float SPAWNFLAG_SUPERSPIKE;
float SPAWNFLAG_LASER;
void() spikeshooter_use;
void() shooter_think;
void() trap_spikeshooter;
void() trap_shooter;
void() make_bubbles;
void() bubble_remove;
void() bubble_bob;
void() air_bubbles;
void() bubble_split;
void() viewthing;
void() func_wall_use;
void() func_wall;
void() func_illusionary;
void() func_episodegate;
void() func_bossgate;
void() ambient_suck_wind;
void() ambient_drone;
void() ambient_flouro_buzz;
void() ambient_drip;
void() ambient_comp_hum;
void() ambient_thunder;
void() ambient_light_buzz;
void() ambient_swamp1;
void() ambient_swamp2;
void() noise_think;
void() misc_noisemaker;
void() plat_center_touch;
void() plat_outside_touch;
void() plat_trigger_use;
void() plat_go_up;
void() plat_go_down;
void() plat_crush;
float PLAT_LOW_TRIGGER;
void() plat_spawn_inside_trigger;
void() plat_hit_top;
void() plat_hit_bottom;
void() plat_use;
void() func_plat;
void() train_next;
void() func_train_find;
void() train_blocked;
void() train_use;
void() train_wait;
void() func_train;
void() misc_teleporttrain;
void() player_run_mesmo;
void() player_shot2;
void() player_shot3;
void() player_shot4;
void() player_shot5;
void() player_shot6;
void() player_axe4;
void() player_axe3;
void() player_axe2;
void() player_kaxe1;
void() player_kaxe2;
void() player_kaxe3;
void() player_kaxe4;
void() player_gaxe2;
void() player_gaxe3;
void() player_gaxe4;
void() player_axeb2;
void() player_axeb3;
void() player_axeb4;
void() player_axec2;
void() player_axec3;
void() player_axec4;
void() player_axed2;
void() player_axed3;
void() player_axed4;
void() player_nail2;
void() player_laser2;
void() player_laser3;
void() player_laser4;
void() player_Chaingun2;
void() player_rocket2;
void() player_rocket3;
void() player_rocket4;
void() player_rocket5;
void() player_rocket6;
void() player_light2;
void() SW_TeslaFrame;
void() player_Tesla2;
void(float num_bubbles) DeathBubbles;
void() player_pain2;
void() player_pain3;
void() player_pain4;
void() player_pain5;
void() player_pain6;
void() player_axpain2;
void() player_axpain3;
void() player_axpain4;
void() player_axpain5;
void() player_axpain6;
void() DeathBubblesSpawn;
void() PlayerDead;
vector(float dm) VelocityForDamage;
void(string gibname, float dm) ThrowHead;
void() player_revdie_gun1;
void() player_diea2;
void() player_diea3;
void() player_diea4;
void() player_diea5;
void() player_diea6;
void() player_diea7;
void() player_diea8;
void() player_diea9;
void() player_diea10;
void() player_diea11;
void() player_dieb2;
void() player_dieb3;
void() player_dieb4;
void() player_dieb5;
void() player_dieb6;
void() player_dieb7;
void() player_dieb8;
void() player_dieb9;
void() player_diec2;
void() player_diec3;
void() player_diec4;
void() player_diec5;
void() player_diec6;
void() player_diec7;
void() player_diec8;
void() player_diec9;
void() player_diec10;
void() player_diec11;
void() player_diec12;
void() player_diec13;
void() player_diec14;
void() player_diec15;
void() player_died2;
void() player_died3;
void() player_died4;
void() player_died5;
void() player_died6;
void() player_died7;
void() player_died8;
void() player_died9;
void() player_diee2;
void() player_diee3;
void() player_diee4;
void() player_diee5;
void() player_diee6;
void() player_diee7;
void() player_diee8;
void() player_diee9;
void() player_die_ax2;
void() player_die_ax3;
void() player_die_ax4;
void() player_die_ax5;
void() player_die_ax6;
void() player_die_ax7;
void() player_die_ax8;
void() player_die_ax9;
void() ZUMBI_Touch;
void() ZUMBI_Apontador_Aponta;
void() player_revdie_gun2;
void() player_revdie_gun3;
void() player_revdie_gun4;
void() player_revdie_gun5;
void() player_revdie_gun6;
void() player_revdie_gun7;
void() player_revdie_gun8;
void() player_revdie_gun9;
void() player_revdie_gun10;
void() player_revdie_gun21;
void() player_revdie_gun11;
void() player_revdie_gun22;
void() player_revdie_gun23;
void() player_revdie_gun24;
void() player_revdie_gun25;
void() player_revdie_gun26;
void() player_revdie_gun27;
void() player_revdie_gun28;
void() player_revdie_gun29;
void() player_revdie_gun30;
void() button_wait;
void() button_return;
void() button_done;
void() button_blocked;
void() button_fire;
void() button_use;
void() button_touch;
void() button_killed;
void() func_button;
entity stemp;
entity otemp;
entity s;
entity old;
void() trigger_reactivate;
float SPAWNFLAG_NOMESSAGE;
float SPAWNFLAG_NOTOUCH;
void() multi_wait;
void() multi_trigger;
void() multi_killed;
void() multi_use;
void() multi_touch;
void() trigger_multiple;
void() trigger_once;
void() trigger_relay;
void() trigger_secret;
void() counter_use;
void() trigger_counter;
float PLAYER_ONLY;
float SILENT;
void() play_teleport;
void() tdeath_touch;
void() teleport_touch;
void() info_teleport_destination;
void() teleport_use;
void() trigger_teleport;
void() trigger_setskill;
void() trigger_onlyregistered_touch;
void() trigger_onlyregistered;
void() hurt_on;
void() hurt_touch;
void() trigger_hurt;
float PUSH_ONCE;
void() trigger_push_touch;
void() trigger_push;
void() dog_leap1;
void() dog_run1;
void() dog_bite;
void() Dog_JumpTouch;
void() dog_stand1;
void() dog_stand2;
void() dog_stand3;
void() dog_stand4;
void() dog_stand5;
void() dog_stand6;
void() dog_stand7;
void() dog_stand8;
void() dog_stand9;
void() dog_walk1;
void() dog_walk2;
void() dog_walk3;
void() dog_walk4;
void() dog_walk5;
void() dog_walk6;
void() dog_walk7;
void() dog_walk8;
void() dog_run2;
void() dog_run3;
void() dog_run4;
void() dog_run5;
void() dog_run6;
void() dog_run7;
void() dog_run8;
void() dog_run9;
void() dog_run10;
void() dog_run11;
void() dog_run12;
void() dog_atta1;
void() dog_atta2;
void() dog_atta3;
void() dog_atta4;
void() dog_atta5;
void() dog_atta6;
void() dog_atta7;
void() dog_atta8;
void() dog_leap2;
void() dog_leap3;
void() dog_leap4;
void() dog_leap5;
void() dog_leap6;
void() dog_leap7;
void() dog_leap8;
void() dog_leap9;
void() dog_pain1;
void() dog_pain2;
void() dog_pain3;
void() dog_pain4;
void() dog_pain5;
void() dog_pain6;
void() dog_painb1;
void() dog_painb2;
void() dog_painb3;
void() dog_painb4;
void() dog_painb5;
void() dog_painb6;
void() dog_painb7;
void() dog_painb8;
void() dog_painb9;
void() dog_painb10;
void() dog_painb11;
void() dog_painb12;
void() dog_painb13;
void() dog_painb14;
void() dog_painb15;
void() dog_painb16;
void() dog_pain;
void() dog_die1;
void() dog_die2;
void() dog_die3;
void() dog_die4;
void() dog_die5;
void() dog_die6;
void() dog_die7;
void() dog_die8;
void() dog_die9;
void() dog_dieb1;
void() dog_dieb2;
void() dog_dieb3;
void() dog_dieb4;
void() dog_dieb5;
void() dog_dieb6;
void() dog_dieb7;
void() dog_dieb8;
void() dog_dieb9;
void() dog_die;
float() CheckDogMelee;
float() CheckDogJump;
void(entity missile, float mspeed, float accuracy) LaunchMissile;
void() wiz_run1;
void() wiz_side1;
float() WizardCheckAttack;
float() WizardAttackFinished;
void() meleca_virulenta_touch;
void() Wiz_FastFire;
void() Wiz_StartFast;
void() Wiz_idlesound;
void() wiz_stand1;
void() wiz_stand2;
void() wiz_stand3;
void() wiz_stand4;
void() wiz_stand5;
void() wiz_stand6;
void() wiz_stand7;
void() wiz_stand8;
void() wiz_walk1;
void() wiz_walk2;
void() wiz_walk3;
void() wiz_walk4;
void() wiz_walk5;
void() wiz_walk6;
void() wiz_walk7;
void() wiz_walk8;
void() wiz_side2;
void() wiz_side3;
void() wiz_side4;
void() wiz_side5;
void() wiz_side6;
void() wiz_side7;
void() wiz_side8;
void() wiz_run2;
void() wiz_run3;
void() wiz_run4;
void() wiz_run5;
void() wiz_run6;
void() wiz_run7;
void() wiz_run8;
void() wiz_run9;
void() wiz_run10;
void() wiz_run11;
void() wiz_run12;
void() wiz_run13;
void() wiz_run14;
void() wiz_fast1;
void() wiz_fast2;
void() wiz_fast3;
void() wiz_fast4;
void() wiz_fast5;
void() wiz_fast6;
void() wiz_fast7;
void() wiz_fast8;
void() wiz_fast9;
void() wiz_fast10;
void() wiz_pain1;
void() wiz_pain2;
void() wiz_pain3;
void() wiz_pain4;
void() wiz_death1;
void() wiz_death2;
void() wiz_death3;
void() wiz_death4;
void() wiz_death5;
void() wiz_death6;
void() wiz_death7;
void() wiz_death8;
void() wiz_die;
void(entity attacker, float damage) Wiz_Pain;
void() Wiz_Missile;
void() sai_melee;
void() hknight_char_a1;
void() hknight_run1;
void() hk_idle_sound;
void(float offset) hknight_shot;
void() CheckForCharge;
void() CheckContinueCharge;
void() hknight_stand1;
void() hknight_stand2;
void() hknight_stand3;
void() hknight_stand4;
void() hknight_stand5;
void() hknight_stand6;
void() hknight_stand7;
void() hknight_stand8;
void() hknight_stand9;
void() hknight_walk1;
void() hknight_walk2;
void() hknight_walk3;
void() hknight_walk4;
void() hknight_walk5;
void() hknight_walk6;
void() hknight_walk7;
void() hknight_walk8;
void() hknight_walk9;
void() hknight_walk10;
void() hknight_walk11;
void() hknight_walk12;
void() hknight_walk13;
void() hknight_walk14;
void() hknight_walk15;
void() hknight_walk16;
void() hknight_walk17;
void() hknight_walk18;
void() hknight_walk19;
void() hknight_walk20;
void() hknight_run2;
void() hknight_run3;
void() hknight_run4;
void() hknight_run5;
void() hknight_run6;
void() hknight_run7;
void() hknight_run8;
void() hknight_pain1;
void() hknight_pain2;
void() hknight_pain3;
void() hknight_pain4;
void() hknight_pain5;
void() hknight_die1;
void() hknight_die2;
void() hknight_die3;
void() hknight_die4;
void() hknight_die5;
void() hknight_die6;
void() hknight_die7;
void() hknight_die8;
void() hknight_die9;
void() hknight_die10;
void() hknight_die11;
void() hknight_die12;
void() hknight_dieb1;
void() hknight_dieb2;
void() hknight_dieb3;
void() hknight_dieb4;
void() hknight_dieb5;
void() hknight_dieb6;
void() hknight_dieb7;
void() hknight_dieb8;
void() hknight_dieb9;
void() hknight_die;
void() hknight_magica1;
void() hknight_magica2;
void() hknight_magica3;
void() hknight_magica4;
void() hknight_magica5;
void() hknight_magica6;
void() hknight_magica7;
void() hknight_magica8;
void() hknight_magica9;
void() hknight_magica10;
void() hknight_magica11;
void() hknight_magica12;
void() hknight_magica13;
void() hknight_magica14;
void() hknight_magicb1;
void() hknight_magicb2;
void() hknight_magicb3;
void() hknight_magicb4;
void() hknight_magicb5;
void() hknight_magicb6;
void() hknight_magicb7;
void() hknight_magicb8;
void() hknight_magicb9;
void() hknight_magicb10;
void() hknight_magicb11;
void() hknight_magicb12;
void() hknight_magicb13;
void() hknight_magicc1;
void() hknight_magicc2;
void() hknight_magicc3;
void() hknight_magicc4;
void() hknight_magicc5;
void() hknight_magicc6;
void() hknight_magicc7;
void() hknight_magicc8;
void() hknight_magicc9;
void() hknight_magicc10;
void() hknight_magicc11;
void() hknight_char_a2;
void() hknight_char_a3;
void() hknight_char_a4;
void() hknight_char_a5;
void() hknight_char_a6;
void() hknight_char_a7;
void() hknight_char_a8;
void() hknight_char_a9;
void() hknight_char_a10;
void() hknight_char_a11;
void() hknight_char_a12;
void() hknight_char_a13;
void() hknight_char_a14;
void() hknight_char_a15;
void() hknight_char_a16;
void() hknight_char_b1;
void() hknight_char_b2;
void() hknight_char_b3;
void() hknight_char_b4;
void() hknight_char_b5;
void() hknight_char_b6;
void() hknight_slice1;
void() hknight_slice2;
void() hknight_slice3;
void() hknight_slice4;
void() hknight_slice5;
void() hknight_slice6;
void() hknight_slice7;
void() hknight_slice8;
void() hknight_slice9;
void() hknight_slice10;
void() hknight_smash1;
void() hknight_smash2;
void() hknight_smash3;
void() hknight_smash4;
void() hknight_smash5;
void() hknight_smash6;
void() hknight_smash7;
void() hknight_smash8;
void() hknight_smash9;
void() hknight_smash10;
void() hknight_smash11;
void() hknight_watk1;
void() hknight_watk2;
void() hknight_watk3;
void() hknight_watk4;
void() hknight_watk5;
void() hknight_watk6;
void() hknight_watk7;
void() hknight_watk8;
void() hknight_watk9;
void() hknight_watk10;
void() hknight_watk11;
void() hknight_watk12;
void() hknight_watk13;
void() hknight_watk14;
void() hknight_watk15;
void() hknight_watk16;
void() hknight_watk17;
void() hknight_watk18;
void() hknight_watk19;
void() hknight_watk20;
void() hknight_watk21;
void() hknight_watk22;
void(entity attacker, float damage) hknight_pain;
float hknight_type;
void() hknight_melee;
